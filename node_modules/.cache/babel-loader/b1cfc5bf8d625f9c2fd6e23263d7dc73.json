{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\isk\\\\ETH-NFT-game\\\\nft-game-starter-project\\\\src\\\\Components\\\\SelectCharacter\\\\index.js\",\n    _s = $RefreshSig$();\n\n// index.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\"; // SelectCharacter コンポーネントを定義しています。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null); // NFT キャラクターを Mint します。\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n    }\n  }; // ページがロードされた瞬間に下記を実行します。\n\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContract の状態を更新します。\n\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []); //  NFT キャラクターのデータを取得する\n\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\"); // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn); // すべてのNFTキャラクターのデータを変換します。\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定します。\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    }; // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\n\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`); // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters(); // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      // コンポーネントがマウントされたら、リスナーを停止する。\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]); // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n\n  function renderCharacters() {\n    return characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"name-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: character.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: character.imageURI,\n        alt: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"character-mint-button\",\n        children: `Mint ${character.name}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, character.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectCharacter, \"ReBpEb1ZDzzSsIn8oOlkhmevdME=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintCharacterNFTAction","characterId","console","log","mintTxn","mintCharacterNFT","wait","error","warn","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUserHasNFT","on","off","renderCharacters","character","index","name","imageURI","length"],"sources":["C:/Users/isk/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"sourcesContent":["// index.js\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./SelectCharacter.css\";\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\r\n\r\n// SelectCharacter コンポーネントを定義しています。\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [gameContract, setGameContract] = useState(null);\r\n\r\n  // NFT キャラクターを Mint します。\r\n  const mintCharacterNFTAction = (characterId) => async () => {\r\n    try {\r\n      if (gameContract) {\r\n        console.log(\"Minting character in progress...\");\r\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n        await mintTxn.wait();\r\n        console.log(\"mintTxn:\", mintTxn);\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"MintCharacterAction Error:\", error);\r\n    }\r\n  };\r\n\r\n  // ページがロードされた瞬間に下記を実行します。\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n\r\n      // gameContract の状態を更新します。\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log(\"Ethereum object not found\");\r\n    }\r\n  }, []);\r\n\r\n  //  NFT キャラクターのデータを取得する\r\n  useEffect(() => {\r\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\r\n    const getCharacters = async () => {\r\n      try {\r\n        console.log(\"Getting contract characters to mint\");\r\n  \r\n        // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\r\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n  \r\n        console.log(\"charactersTxn:\", charactersTxn);\r\n  \r\n        // すべてのNFTキャラクターのデータを変換します。\r\n        const characters = charactersTxn.map((characterData) =>\r\n          transformCharacterData(characterData)\r\n        );\r\n  \r\n        // ミント可能なすべてのNFTキャラクターの状態を設定します。\r\n        setCharacters(characters);\r\n      } catch (error) {\r\n        console.error(\"Something went wrong fetching characters:\", error);\r\n      }\r\n    };\r\n  \r\n    // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\r\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n      console.log(\r\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n      );\r\n      // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\r\n      if (gameContract) {\r\n        const characterNFT = await gameContract.checkIfUserHasNFT();\r\n        console.log(\"CharacterNFT: \", characterNFT);\r\n        setCharacterNFT(transformCharacterData(characterNFT));\r\n      }\r\n    };\r\n  \r\n    if (gameContract) {\r\n      getCharacters();\r\n      // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\r\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\r\n    }\r\n  \r\n    return () => {\r\n      // コンポーネントがマウントされたら、リスナーを停止する。\r\n  \r\n      if (gameContract) {\r\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\r\n      }\r\n    };\r\n  }, [gameContract]);\r\n\r\n  // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\r\n  function renderCharacters() {\r\n    return characters.map((character, index) => (\r\n      <div className=\"character-item\" key={character.name}>\r\n        <div className=\"name-container\">\r\n          <p>{character.name}</p>\r\n        </div>\r\n        <img src={character.imageURI} alt={character.name} />\r\n        <button\r\n          type=\"button\"\r\n          className=\"character-mint-button\"\r\n        >{`Mint ${character.name}`}</button>\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <div className=\"select-character-container\">\r\n      <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\r\n      {/* キャラクターNFTがフロントエンド上で読み込めている際に、下記を表示します*/}\r\n      {characters.length > 0 && (\r\n        <div className=\"character-grid\">{renderCharacters()}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default SelectCharacter;"],"mappings":"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"},"metadata":{},"sourceType":"module"}