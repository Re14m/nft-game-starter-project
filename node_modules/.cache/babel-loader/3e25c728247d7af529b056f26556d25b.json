{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\isk\\\\ETH-NFT-game\\\\nft-game-starter-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport Arena from \"./Components/Arena\";\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport LoadingIndicator from \"./Components/LoadingIndicator\"; // Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"あなたのTwitterハンドル\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null); // characterNFT と setCharacterNFT を初期化します。\n\n  const [characterNFT, setCharacterNFT] = useState(null); // ロード状態を初期化します。\n\n  const [isLoading, setIsLoading] = useState(false); // ユーザーがRinkeby Network に接続されているか確認します。\n  // '4' は Rinkeby のネットワークコードです。\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"4\") {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ユーザーが MetaMask を持っているか確認します。\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\"); // 次の行で return を使用するため、ここで isLoading を設定します。\n\n        setIsLoading(false);\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum); // accounts にWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n\n        const accounts = await ethereum.request({\n          method: \"eth_accounts\"\n        }); // もしアカウントが一つでも存在したら、以下を実行。\n\n        if (accounts.length !== 0) {\n          // account という変数にユーザーの1つ目（= Javascript でいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account); // currentAccount にユーザーのアカウントアドレスを格納\n\n          setCurrentAccount(account);\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    } //すべての関数ロジックの後に、state プロパティを解放します。\n\n\n    setIsLoading(false);\n  }; // Arena/App.js\n  // レンダリングメソッド\n\n\n  const renderContent = () => {\n    // アプリがロード中の場合は、LoadingIndicator をレンダリングします。\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 14\n      }, this);\n    } // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n\n\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/yMocj5x.png\",\n          alt: \"Pikachu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this); // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 14\n      }, this); // シナリオ3.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\n      // Arena でボスと戦います。\n    } else if (currentAccount && characterNFT) {\n      return /*#__PURE__*/_jsxDEV(Arena, {\n        characterNFT: characterNFT,\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 14\n      }, this);\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"MetaMask を ダウンロードしてください!\");\n        return;\n      } // ユーザーがウォレットを持っているか確認します。\n\n\n      checkIfWalletIsConnected(); // ウォレットアドレスに対してアクセスをリクエストしています。\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // ウォレットアドレスを currentAccount に紐付けます。\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // ユーザーが Rinkeby に接続されているか確認します。\n\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n\n  useEffect(() => {\n    // ページがロードされたら、即座にロード状態を設定するようにします。\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []); // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      } // ユーザーが保持している NFT の確認が完了したら、ロード状態を false に設定します。\n\n\n      setIsLoading(false);\n    };\n  }, [currentAccount]); // App.js\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"WfKwg0DIevkC/Lp/DKpo5wNTmQM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ethers","CONTRACT_ADDRESS","transformCharacterData","React","useEffect","useState","myEpicGame","Arena","SelectCharacter","LoadingIndicator","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","isLoading","setIsLoading","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","renderContent","connectWalletAction","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","twitterLogo"],"sources":["C:/Users/isk/ETH-NFT-game/nft-game-starter-project/src/App.js"],"sourcesContent":["// App.js\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport \"./App.css\";\r\nimport myEpicGame from \"./utils/MyEpicGame.json\";\r\nimport Arena from \"./Components/Arena\";\r\nimport SelectCharacter from \"./Components/SelectCharacter\";\r\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\r\n\r\n// Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\r\nconst TWITTER_HANDLE = \"あなたのTwitterハンドル\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  // characterNFT と setCharacterNFT を初期化します。\r\n  const [characterNFT, setCharacterNFT] = useState(null);\r\n  // ロード状態を初期化します。\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // ユーザーがRinkeby Network に接続されているか確認します。\r\n  // '4' は Rinkeby のネットワークコードです。\r\n  const checkNetwork = async () => {\r\n    try {\r\n      if (window.ethereum.networkVersion !== \"4\") {\r\n        alert(\"Rinkeby Test Network に接続してください!\");\r\n      } else {\r\n        console.log(\"Rinkeby に接続されています.\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  // ユーザーが MetaMask を持っているか確認します。\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have MetaMask!\");\r\n\r\n        // 次の行で return を使用するため、ここで isLoading を設定します。\r\n        setIsLoading(false);\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n\r\n        // accounts にWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\r\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\r\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n        // もしアカウントが一つでも存在したら、以下を実行。\r\n        if (accounts.length !== 0) {\r\n          // account という変数にユーザーの1つ目（= Javascript でいう0番目）のアドレスを格納\r\n          const account = accounts[0];\r\n          console.log(\"Found an authorized account:\", account);\r\n\r\n          // currentAccount にユーザーのアカウントアドレスを格納\r\n          setCurrentAccount(account);\r\n        } else {\r\n          console.log(\"No authorized account found\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    //すべての関数ロジックの後に、state プロパティを解放します。\r\n    setIsLoading(false);\r\n  };\r\n  // Arena/App.js\r\n  // レンダリングメソッド\r\n  const renderContent = () => {\r\n    // アプリがロード中の場合は、LoadingIndicator をレンダリングします。\r\n    if (isLoading) {\r\n      return <LoadingIndicator />;\r\n    }\r\n    // シナリオ1.\r\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\r\n    if (!currentAccount) {\r\n      return (\r\n        <div className=\"connect-wallet-container\">\r\n          <img src=\"https://i.imgur.com/yMocj5x.png\" alt=\"Pikachu\" />\r\n          <button\r\n            className=\"cta-button connect-wallet-button\"\r\n            onClick={connectWalletAction}\r\n          >\r\n            Connect Wallet to Get Started\r\n          </button>\r\n        </div>\r\n      );\r\n      // シナリオ2.\r\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\r\n    } else if (currentAccount && !characterNFT) {\r\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\r\n      // シナリオ3.\r\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\r\n      // Arena でボスと戦います。\r\n    } else if (currentAccount && characterNFT) {\r\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\r\n    }\r\n  };\r\n\r\n  // connectWallet メソッドを実装します。\r\n  const connectWalletAction = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        alert(\"MetaMask を ダウンロードしてください!\");\r\n        return;\r\n      }\r\n\r\n      // ユーザーがウォレットを持っているか確認します。\r\n      checkIfWalletIsConnected();\r\n\r\n      // ウォレットアドレスに対してアクセスをリクエストしています。\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      // ウォレットアドレスを currentAccount に紐付けます。\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n\r\n      // ユーザーが Rinkeby に接続されているか確認します。\r\n      checkNetwork();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\r\n  useEffect(() => {\r\n\t// ページがロードされたら、即座にロード状態を設定するようにします。\r\n\tsetIsLoading(true);\r\n\tcheckIfWalletIsConnected();\r\n}, []);\r\n\r\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\r\n  useEffect(() => {\r\n\t  // スマートコントラクトを呼び出す関数です。\r\n\t  const fetchNFTMetadata = async () => {\r\n\t\t  console.log('Checking for Character NFT on address:', currentAccount);\r\n\r\n\t\t  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\t\t  const signer = provider.getSigner();\r\n\t\t  const gameContract = new ethers.Contract(\r\n\t\t  CONTRACT_ADDRESS,\r\n\t\t  myEpicGame.abi,\r\n\t\t  signer\r\n\t\t  );\r\n\r\n\t  const txn = await gameContract.checkIfUserHasNFT();\r\n\t  if (txn.name) {\r\n\t\t  console.log('User has character NFT');\r\n\t\t  setCharacterNFT(transformCharacterData(txn));\r\n\t  } else {\r\n\t\t  console.log('No character NFT found');\r\n\t  }\r\n\t  // ユーザーが保持している NFT の確認が完了したら、ロード状態を false に設定します。\r\n\t  setIsLoading(false);\r\n    }\r\n  }, [currentAccount]);\r\n\r\n  // App.js\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\r\n          <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\r\n          {/* renderContent メソッドを呼び出します。*/}\r\n          {renderContent()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built with @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}